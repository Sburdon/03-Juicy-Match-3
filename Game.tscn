[gd_scene load_steps=10 format=2]

[ext_resource path="res://Grid/grid.gd" type="Script" id=1]
[ext_resource path="res://Grid/Game.gd" type="Script" id=2]
[ext_resource path="res://UI/HUD.gd" type="Script" id=3]
[ext_resource path="res://UI/Level.gd" type="Script" id=4]
[ext_resource path="res://UI/Goals.gd" type="Script" id=5]
[ext_resource path="res://Not Giving Up.ogg" type="AudioStream" id=6]
[ext_resource path="res://icon.png" type="Texture" id=7]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 BackColor : hint_color = vec4(0.0, 0.4, 0.58, 1.0);
uniform vec4 CloudColor : hint_color = vec4(0.18, 0.70, 0.87, 1.0);
uniform float speed : hint_range(0.0, 5.0) = 0.1;

const float TAU = 6.28318530718;

float Func(float pX)
{
	return 0.6*(0.5*sin(0.1*pX) + 0.5*sin(0.553*pX) + 0.7*sin(1.2*pX));
}


float FuncR(float pX)
{
	return 0.5 + 0.25*(1.0 + sin(mod(40.0*pX, TAU)));
}


float Layer(vec2 pQ, float pT)
{
	vec2 Qt = 3.5*pQ;
	pT *= 0.5;
	Qt.x += pT;

	float Xi = floor(Qt.x);
	float Xf = Qt.x - Xi -0.5;

	vec2 C;
	float Yi;
	float D = 1.0 - step(Qt.y,  Func(Qt.x));

	// Disk:
	Yi = Func(Xi + 0.5);
	C = vec2(Xf, Qt.y - Yi );
	D =  min(D, length(C) - FuncR(Xi+ pT/80.0));

	// Previous disk:
	Yi = Func(Xi+1.0 + 0.5);
	C = vec2(Xf-1.0, Qt.y - Yi );
	D =  min(D, length(C) - FuncR(Xi+1.0+ pT/80.0));

	// Next Disk:
	Yi = Func(Xi-1.0 + 0.5);
	C = vec2(Xf+1.0, Qt.y - Yi );
	D =  min(D, length(C) - FuncR(Xi-1.0+ pT/80.0));

	return min(1.0, D);
}

void fragment() {
	//vec2 uv = 8.0 * (SCREEN_UV - UV * 2.0);
	vec2 uv = 3.0 * (SCREEN_UV - UV * 2.0);

	// Render:
	vec3 Color= BackColor.rgb;
	for(float J = 0.0; J <= 1.0; J += 0.2)
	{
		// Cloud Layer:
		float Lt =  TIME * speed * (0.5  + 2.0 * J) * (1.0 + 0.1 * sin(226.0 * J)) + 17.0 * J;
		vec2 Lp = vec2(0.0, 0.3 + 1.5 * ( J - 0.5));
		float L = Layer(uv + Lp, Lt);
		// Blur and color:
		float Blur = 4.0 * (0.5 * abs(2.0 - 5.0 * J)) / (11.0 - 5.0 * J);
		float V = mix( 0.0, 1.0, 1.0 - smoothstep( 0.0, 0.01 +0.2 * Blur, L ) );
		vec3 Lc=  mix(CloudColor.rgb, vec3(1.0), J);
		Color =mix(Color, Lc,  V);
	}
	COLOR = vec4(Color,1.);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/BackColor = Color( 0, 0, 0, 1 )
shader_param/CloudColor = Color( 0.0784314, 0.0980392, 0.105882, 1 )
shader_param/speed = 0.887

[node name="Game" type="Node2D"]
process_priority = 1
script = ExtResource( 2 )
width = 4
height = 6
level = 1

[node name="Shader" type="Sprite" parent="."]
material = SubResource( 2 )
scale = Vector2( 4.5, 8 )
texture = ExtResource( 7 )
centered = false

[node name="Grid" type="Node2D" parent="."]
script = ExtResource( 1 )
x_start = 100
y_start = 800
offset = 128
y_offset = 128
possible_pieces = PoolStringArray( "res://Pieces/Blue.tscn", "res://Pieces/Green.tscn", "res://Pieces/Red.tscn" )

[node name="HintTimer" type="Timer" parent="Grid"]

[node name="DestroyTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="RefillTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="CollapseTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="Goals_Container" type="Node2D" parent="."]

[node name="UI" type="CanvasLayer" parent="."]

[node name="HUD" type="Control" parent="UI"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Score" type="Label" parent="UI/HUD"]
margin_left = 5.0
margin_top = 7.0
margin_right = 255.0
margin_bottom = 22.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "Score: "
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Moves" type="Label" parent="UI/HUD"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -255.0
margin_top = 7.0
margin_right = -5.0
margin_bottom = 22.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "Moves: "
align = 2
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="UI/HUD"]
anchor_right = 1.0
margin_bottom = 30.0
color = Color( 1, 1, 1, 0.376471 )

[node name="Level" type="Control" parent="UI"]
pause_mode = 2
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Background" type="ColorRect" parent="UI/Level"]
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_top = -100.0
margin_bottom = 100.0
color = Color( 1, 1, 1, 0.501961 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Background2" type="ColorRect" parent="UI/Level"]
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_top = -76.0
margin_bottom = 74.0
color = Color( 1, 1, 1, 0.501961 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Level" type="Label" parent="UI/Level"]
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_top = -47.0
margin_bottom = -7.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "Level 1"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Instructions" type="Label" parent="UI/Level"]
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_top = 8.0
margin_bottom = 68.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "Match 15 red blocks"
align = 1
valign = 1

[node name="Timer" type="Timer" parent="UI/Level"]
wait_time = 3.0
one_shot = true

[node name="Goals" type="Control" parent="UI"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Goals" type="Label" parent="UI/Goals"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -104.0
margin_bottom = -4.0
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
volume_db = -27.092
autoplay = true

[connection signal="set_dimensions" from="." to="Grid" method="_on_Game_set_dimensions"]
[connection signal="timeout" from="DestroyTimer" to="Grid" method="_on_DestroyTimer_timeout"]
[connection signal="timeout" from="RefillTimer" to="Grid" method="_on_RefillTimer_timeout"]
[connection signal="timeout" from="CollapseTimer" to="Grid" method="_on_CollapseTimer_timeout"]
[connection signal="timeout" from="UI/Level/Timer" to="UI/Level" method="_on_Timer_timeout"]
